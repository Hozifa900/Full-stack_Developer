{"ast":null,"code":"\"use strict\";\n\nconst DOMTokenList = require(\"../generated/DOMTokenList\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst {\n  getLabelsForLabelable,\n  formOwner\n} = require(\"../helpers/form-controls\");\n\nclass HTMLOutputElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._labels = null;\n    this._defaultValueOverride = null;\n    this._customValidityErrorMessage = \"\";\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"for\" && this._htmlFor !== undefined) {\n      this._htmlFor.attrModified();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return true;\n  }\n\n  _formReset() {\n    this.textContent = this.defaultValue;\n    this._defaultValueOverride = null;\n  }\n\n  get htmlFor() {\n    if (this._htmlFor === undefined) {\n      this._htmlFor = DOMTokenList.createImpl(this._globalObject, [], {\n        element: this,\n        attributeLocalName: \"for\"\n      });\n    }\n\n    return this._htmlFor;\n  }\n\n  get type() {\n    return \"output\";\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get value() {\n    return this.textContent;\n  }\n\n  set value(val) {\n    this._defaultValueOverride = this.defaultValue;\n    this.textContent = val;\n  }\n\n  get defaultValue() {\n    if (this._defaultValueOverride !== null) {\n      return this._defaultValueOverride;\n    }\n\n    return this.textContent;\n  }\n\n  set defaultValue(val) {\n    if (this._defaultValueOverride === null) {\n      this.textContent = val;\n      return;\n    }\n\n    this._defaultValueOverride = val;\n  }\n\n}\n\nmixin(HTMLOutputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLOutputElementImpl\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/aljazira/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOutputElement-impl.js"],"names":["DOMTokenList","require","HTMLElementImpl","implementation","DefaultConstraintValidationImpl","mixin","getLabelsForLabelable","formOwner","HTMLOutputElementImpl","constructor","globalObject","args","privateData","_labels","_defaultValueOverride","_customValidityErrorMessage","_attrModified","name","value","oldValue","_htmlFor","undefined","attrModified","_barredFromConstraintValidationSpecialization","_formReset","textContent","defaultValue","htmlFor","createImpl","_globalObject","element","attributeLocalName","type","labels","form","val","prototype","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAAP,CAA8BE,cAAtD;;AACA,MAAMC,+BAA+B,GACnCH,OAAO,CAAC,2DAAD,CAAP,CAAqEE,cADvE;;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAYJ,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAM;AAAEK,EAAAA,qBAAF;AAAyBC,EAAAA;AAAzB,IAAuCN,OAAO,CAAC,0BAAD,CAApD;;AAEA,MAAMO,qBAAN,SAAoCN,eAApC,CAAoD;AAClDO,EAAAA,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;AAC3C,UAAMF,YAAN,EAAoBC,IAApB,EAA0BC,WAA1B;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,qBAAL,GAA6B,IAA7B;AAEA,SAAKC,2BAAL,GAAmC,EAAnC;AACD;;AAEDC,EAAAA,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwB;AACnC,UAAMH,aAAN,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,QAAjC;;AAEA,QAAIF,IAAI,KAAK,KAAT,IAAkB,KAAKG,QAAL,KAAkBC,SAAxC,EAAmD;AACjD,WAAKD,QAAL,CAAcE,YAAd;AACD;AACF;;AAEDC,EAAAA,6CAA6C,GAAG;AAC9C,WAAO,IAAP;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,SAAKC,WAAL,GAAmB,KAAKC,YAAxB;AACA,SAAKZ,qBAAL,GAA6B,IAA7B;AACD;;AAEU,MAAPa,OAAO,GAAG;AACZ,QAAI,KAAKP,QAAL,KAAkBC,SAAtB,EAAiC;AAC/B,WAAKD,QAAL,GAAgBpB,YAAY,CAAC4B,UAAb,CAAwB,KAAKC,aAA7B,EAA4C,EAA5C,EAAgD;AAC9DC,QAAAA,OAAO,EAAE,IADqD;AAE9DC,QAAAA,kBAAkB,EAAE;AAF0C,OAAhD,CAAhB;AAID;;AACD,WAAO,KAAKX,QAAZ;AACD;;AAEO,MAAJY,IAAI,GAAG;AACT,WAAO,QAAP;AACD;;AAES,MAANC,MAAM,GAAG;AACX,WAAO3B,qBAAqB,CAAC,IAAD,CAA5B;AACD;;AAEO,MAAJ4B,IAAI,GAAG;AACT,WAAO3B,SAAS,CAAC,IAAD,CAAhB;AACD;;AAEQ,MAALW,KAAK,GAAG;AACV,WAAO,KAAKO,WAAZ;AACD;;AAEQ,MAALP,KAAK,CAACiB,GAAD,EAAM;AACb,SAAKrB,qBAAL,GAA6B,KAAKY,YAAlC;AACA,SAAKD,WAAL,GAAmBU,GAAnB;AACD;;AAEe,MAAZT,YAAY,GAAG;AACjB,QAAI,KAAKZ,qBAAL,KAA+B,IAAnC,EAAyC;AACvC,aAAO,KAAKA,qBAAZ;AACD;;AACD,WAAO,KAAKW,WAAZ;AACD;;AAEe,MAAZC,YAAY,CAACS,GAAD,EAAM;AACpB,QAAI,KAAKrB,qBAAL,KAA+B,IAAnC,EAAyC;AACvC,WAAKW,WAAL,GAAmBU,GAAnB;AACA;AACD;;AAED,SAAKrB,qBAAL,GAA6BqB,GAA7B;AACD;;AAvEiD;;AA0EpD9B,KAAK,CAACG,qBAAqB,CAAC4B,SAAvB,EAAkChC,+BAA+B,CAACgC,SAAlE,CAAL;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfnC,EAAAA,cAAc,EAAEK;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst DOMTokenList = require(\"../generated/DOMTokenList\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst { mixin } = require(\"../../utils\");\nconst { getLabelsForLabelable, formOwner } = require(\"../helpers/form-controls\");\n\nclass HTMLOutputElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._labels = null;\n    this._defaultValueOverride = null;\n\n    this._customValidityErrorMessage = \"\";\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"for\" && this._htmlFor !== undefined) {\n      this._htmlFor.attrModified();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return true;\n  }\n\n  _formReset() {\n    this.textContent = this.defaultValue;\n    this._defaultValueOverride = null;\n  }\n\n  get htmlFor() {\n    if (this._htmlFor === undefined) {\n      this._htmlFor = DOMTokenList.createImpl(this._globalObject, [], {\n        element: this,\n        attributeLocalName: \"for\"\n      });\n    }\n    return this._htmlFor;\n  }\n\n  get type() {\n    return \"output\";\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get value() {\n    return this.textContent;\n  }\n\n  set value(val) {\n    this._defaultValueOverride = this.defaultValue;\n    this.textContent = val;\n  }\n\n  get defaultValue() {\n    if (this._defaultValueOverride !== null) {\n      return this._defaultValueOverride;\n    }\n    return this.textContent;\n  }\n\n  set defaultValue(val) {\n    if (this._defaultValueOverride === null) {\n      this.textContent = val;\n      return;\n    }\n\n    this._defaultValueOverride = val;\n  }\n}\n\nmixin(HTMLOutputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLOutputElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}