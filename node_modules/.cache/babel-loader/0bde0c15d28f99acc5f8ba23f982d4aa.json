{"ast":null,"code":"\"use strict\";\n\nconst {\n  convertNodesIntoNode\n} = require(\"../node\");\n\nclass ChildNodeImpl {\n  remove() {\n    if (!this.parentNode) {\n      return;\n    }\n\n    this.parentNode._remove(this);\n  }\n\n  after() {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n\n        if (!viableNextSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      parent._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), viableNextSibling);\n    }\n  }\n\n  before() {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viablePreviousSibling = this.previousSibling;\n\n      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nodes[_key2] = arguments[_key2];\n      }\n\n      let idx = viablePreviousSibling ? nodes.indexOf(viablePreviousSibling) : -1;\n\n      while (idx !== -1) {\n        viablePreviousSibling = viablePreviousSibling.previousSibling;\n\n        if (!viablePreviousSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viablePreviousSibling);\n      }\n\n      parent._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), viablePreviousSibling ? viablePreviousSibling.nextSibling : parent.firstChild);\n    }\n  }\n\n  replaceWith() {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n\n      for (var _len3 = arguments.length, nodes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        nodes[_key3] = arguments[_key3];\n      }\n\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n\n        if (!viableNextSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      const node = convertNodesIntoNode(this._ownerDocument, nodes);\n\n      if (this.parentNode === parent) {\n        parent._replace(node, this);\n      } else {\n        parent._preInsert(node, viableNextSibling);\n      }\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: ChildNodeImpl\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/aljazira/node_modules/jsdom/lib/jsdom/living/nodes/ChildNode-impl.js"],"names":["convertNodesIntoNode","require","ChildNodeImpl","remove","parentNode","_remove","after","parent","viableNextSibling","nextSibling","nodes","idx","indexOf","_preInsert","_ownerDocument","before","viablePreviousSibling","previousSibling","firstChild","replaceWith","node","_replace","module","exports","implementation"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { convertNodesIntoNode } = require(\"../node\");\n\nclass ChildNodeImpl {\n  remove() {\n    if (!this.parentNode) {\n      return;\n    }\n\n    this.parentNode._remove(this);\n  }\n\n  after(...nodes) {\n    const parent = this.parentNode;\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n        if (!viableNextSibling) {\n          break;\n        }\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      parent._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), viableNextSibling);\n    }\n  }\n\n  before(...nodes) {\n    const parent = this.parentNode;\n    if (parent) {\n      let viablePreviousSibling = this.previousSibling;\n      let idx = viablePreviousSibling ? nodes.indexOf(viablePreviousSibling) : -1;\n\n      while (idx !== -1) {\n        viablePreviousSibling = viablePreviousSibling.previousSibling;\n        if (!viablePreviousSibling) {\n          break;\n        }\n        idx = nodes.indexOf(viablePreviousSibling);\n      }\n\n      parent._preInsert(\n        convertNodesIntoNode(this._ownerDocument, nodes),\n        viablePreviousSibling ? viablePreviousSibling.nextSibling : parent.firstChild\n      );\n    }\n  }\n\n  replaceWith(...nodes) {\n    const parent = this.parentNode;\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n        if (!viableNextSibling) {\n          break;\n        }\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      const node = convertNodesIntoNode(this._ownerDocument, nodes);\n\n      if (this.parentNode === parent) {\n        parent._replace(node, this);\n      } else {\n        parent._preInsert(node, viableNextSibling);\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: ChildNodeImpl\n};\n"]},"metadata":{},"sourceType":"script"}