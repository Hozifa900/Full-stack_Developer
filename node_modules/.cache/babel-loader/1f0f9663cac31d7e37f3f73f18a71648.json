{"ast":null,"code":"\"use strict\";\n\nconst {\n  parseFragment\n} = require(\"../../browser/parser\");\n\nconst {\n  HTML_NS\n} = require(\"../helpers/namespaces.js\");\n\nconst {\n  isShadowRoot\n} = require(\"../helpers/shadow-dom.js\");\n\nconst NODE_TYPE = require(\"../node-type.js\");\n\nconst {\n  fragmentSerialization\n} = require(\"./serialization.js\"); // https://w3c.github.io/DOM-Parsing/#the-innerhtml-mixin\n\n\nexports.implementation = class InnerHTMLImpl {\n  // https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml\n  get innerHTML() {\n    return fragmentSerialization(this, {\n      requireWellFormed: true,\n      globalObject: this._globalObject\n    });\n  }\n\n  set innerHTML(markup) {\n    const contextElement = isShadowRoot(this) ? this.host : this;\n    const fragment = parseFragment(markup, contextElement);\n    let contextObject = this;\n\n    if (this.nodeType === NODE_TYPE.ELEMENT_NODE && this.localName === \"template\" && this.namespaceURI === HTML_NS) {\n      contextObject = this._templateContents;\n    }\n\n    contextObject._replaceAll(fragment);\n  }\n\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/aljazira/node_modules/jsdom/lib/jsdom/living/domparsing/InnerHTML-impl.js"],"names":["parseFragment","require","HTML_NS","isShadowRoot","NODE_TYPE","fragmentSerialization","exports","implementation","InnerHTMLImpl","innerHTML","requireWellFormed","globalObject","_globalObject","markup","contextElement","host","fragment","contextObject","nodeType","ELEMENT_NODE","localName","namespaceURI","_templateContents","_replaceAll"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAmBF,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAA4BJ,OAAO,CAAC,oBAAD,CAAzC,C,CAEA;;;AACAK,OAAO,CAACC,cAAR,GAAyB,MAAMC,aAAN,CAAoB;AAC3C;AACa,MAATC,SAAS,GAAG;AACd,WAAOJ,qBAAqB,CAAC,IAAD,EAAO;AACjCK,MAAAA,iBAAiB,EAAE,IADc;AAEjCC,MAAAA,YAAY,EAAE,KAAKC;AAFc,KAAP,CAA5B;AAID;;AACY,MAATH,SAAS,CAACI,MAAD,EAAS;AACpB,UAAMC,cAAc,GAAGX,YAAY,CAAC,IAAD,CAAZ,GAAqB,KAAKY,IAA1B,GAAiC,IAAxD;AACA,UAAMC,QAAQ,GAAGhB,aAAa,CAACa,MAAD,EAASC,cAAT,CAA9B;AAEA,QAAIG,aAAa,GAAG,IAApB;;AACA,QAAI,KAAKC,QAAL,KAAkBd,SAAS,CAACe,YAA5B,IAA4C,KAAKC,SAAL,KAAmB,UAA/D,IAA6E,KAAKC,YAAL,KAAsBnB,OAAvG,EAAgH;AAC9Ge,MAAAA,aAAa,GAAG,KAAKK,iBAArB;AACD;;AAEDL,IAAAA,aAAa,CAACM,WAAd,CAA0BP,QAA1B;AACD;;AAlB0C,CAA7C","sourcesContent":["\"use strict\";\n\nconst { parseFragment } = require(\"../../browser/parser\");\nconst { HTML_NS } = require(\"../helpers/namespaces.js\");\nconst { isShadowRoot } = require(\"../helpers/shadow-dom.js\");\nconst NODE_TYPE = require(\"../node-type.js\");\nconst { fragmentSerialization } = require(\"./serialization.js\");\n\n// https://w3c.github.io/DOM-Parsing/#the-innerhtml-mixin\nexports.implementation = class InnerHTMLImpl {\n  // https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml\n  get innerHTML() {\n    return fragmentSerialization(this, {\n      requireWellFormed: true,\n      globalObject: this._globalObject\n    });\n  }\n  set innerHTML(markup) {\n    const contextElement = isShadowRoot(this) ? this.host : this;\n    const fragment = parseFragment(markup, contextElement);\n\n    let contextObject = this;\n    if (this.nodeType === NODE_TYPE.ELEMENT_NODE && this.localName === \"template\" && this.namespaceURI === HTML_NS) {\n      contextObject = this._templateContents;\n    }\n\n    contextObject._replaceAll(fragment);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}